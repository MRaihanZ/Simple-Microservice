// Code generated by protoc-gen-go. DO NOT EDIT.
// source: log.proto

package log

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Log struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	CreatedAt            string   `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{0}
}

func (m *Log) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Log.Unmarshal(m, b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Log.Marshal(b, m, deterministic)
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return xxx_messageInfo_Log.Size(m)
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Log) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Log) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

type Response struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Body                 []*Log   `protobuf:"bytes,2,rep,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Response) GetBody() []*Log {
	if m != nil {
		return m.Body
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{2}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type LogId struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogId) Reset()         { *m = LogId{} }
func (m *LogId) String() string { return proto.CompactTextString(m) }
func (*LogId) ProtoMessage()    {}
func (*LogId) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{3}
}

func (m *LogId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogId.Unmarshal(m, b)
}
func (m *LogId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogId.Marshal(b, m, deterministic)
}
func (m *LogId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogId.Merge(m, src)
}
func (m *LogId) XXX_Size() int {
	return xxx_messageInfo_LogId.Size(m)
}
func (m *LogId) XXX_DiscardUnknown() {
	xxx_messageInfo_LogId.DiscardUnknown(m)
}

var xxx_messageInfo_LogId proto.InternalMessageInfo

func (m *LogId) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Log)(nil), "log.Log")
	proto.RegisterType((*Response)(nil), "log.Response")
	proto.RegisterType((*Empty)(nil), "log.Empty")
	proto.RegisterType((*LogId)(nil), "log.LogId")
}

func init() {
	proto.RegisterFile("log.proto", fileDescriptor_a153da538f858886)
}

var fileDescriptor_a153da538f858886 = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x31, 0x4b, 0xc4, 0x40,
	0x10, 0x85, 0x4d, 0x72, 0x31, 0x97, 0x27, 0x5a, 0x4c, 0xe3, 0x22, 0x0a, 0x61, 0x0b, 0x89, 0xcd,
	0x15, 0x67, 0x6b, 0xa3, 0x20, 0x72, 0xb0, 0x58, 0xc4, 0x1f, 0x70, 0xe4, 0xb2, 0xc3, 0x12, 0xb8,
	0x73, 0x42, 0x76, 0x11, 0xf2, 0xef, 0xc5, 0x35, 0x69, 0xb4, 0x7b, 0xf3, 0xe6, 0xcd, 0xe3, 0x63,
	0x50, 0x1e, 0xc5, 0x6d, 0x86, 0x51, 0x82, 0x50, 0x76, 0x14, 0xa7, 0xdf, 0x91, 0x19, 0x71, 0x74,
	0x85, 0xb4, 0xb7, 0x2a, 0xa9, 0x92, 0x3a, 0x6f, 0xd2, 0xde, 0x92, 0x42, 0x71, 0x62, 0xef, 0x5b,
	0xc7, 0x2a, 0xad, 0x92, 0xba, 0x6c, 0x96, 0x91, 0xee, 0x80, 0x6e, 0xe4, 0x36, 0xb0, 0xdd, 0xb7,
	0x41, 0x65, 0x71, 0x59, 0xce, 0xce, 0x73, 0xd0, 0x4f, 0x58, 0x37, 0xec, 0x07, 0xf9, 0xf4, 0x4c,
	0x84, 0x55, 0x27, 0x96, 0xe7, 0xda, 0xa8, 0xe9, 0x16, 0xab, 0x83, 0xd8, 0x49, 0xa5, 0x55, 0x56,
	0x5f, 0x6c, 0xd7, 0x9b, 0x1f, 0x1c, 0x23, 0xae, 0x89, 0xae, 0x2e, 0x90, 0xbf, 0x9e, 0x86, 0x30,
	0xe9, 0x6b, 0xe4, 0x46, 0xdc, 0xce, 0xfe, 0x05, 0xdb, 0xee, 0x01, 0x23, 0xee, 0x83, 0xc7, 0xaf,
	0xbe, 0x63, 0xba, 0x47, 0xf1, 0xc6, 0xc1, 0x88, 0xf3, 0x84, 0x58, 0x15, 0xaf, 0x6f, 0x2e, 0xa3,
	0x5e, 0x38, 0xf4, 0x19, 0x3d, 0x00, 0xbf, 0xb9, 0x97, 0x69, 0x67, 0xe7, 0x68, 0xec, 0xff, 0x17,
	0x3d, 0x9c, 0xc7, 0xe7, 0x3c, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xcb, 0xae, 0xa3, 0x49, 0x29,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogServiceClient interface {
	GetLogs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
	GetLogById(ctx context.Context, in *LogId, opts ...grpc.CallOption) (*Response, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) GetLogs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/log.LogService/GetLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) GetLogById(ctx context.Context, in *LogId, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/log.LogService/GetLogById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServiceServer is the server API for LogService service.
type LogServiceServer interface {
	GetLogs(context.Context, *Empty) (*Response, error)
	GetLogById(context.Context, *LogId) (*Response, error)
}

// UnimplementedLogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (*UnimplementedLogServiceServer) GetLogs(ctx context.Context, req *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (*UnimplementedLogServiceServer) GetLogById(ctx context.Context, req *LogId) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogById not implemented")
}

func RegisterLogServiceServer(s *grpc.Server, srv LogServiceServer) {
	s.RegisterService(&_LogService_serviceDesc, srv)
}

func _LogService_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/log.LogService/GetLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).GetLogs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_GetLogById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).GetLogById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/log.LogService/GetLogById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).GetLogById(ctx, req.(*LogId))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "log.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLogs",
			Handler:    _LogService_GetLogs_Handler,
		},
		{
			MethodName: "GetLogById",
			Handler:    _LogService_GetLogById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "log.proto",
}
